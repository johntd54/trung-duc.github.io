<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Duc Nguyen</title>
    <description>A blog documenting the winding journey to be good.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 26 Jan 2017 11:43:51 +0700</pubDate>
    <lastBuildDate>Thu, 26 Jan 2017 11:43:51 +0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>170117 - Vim cheatsheet</title>
        <description>&lt;p&gt;To remember:
- &lt;code&gt;operator [number] motion&lt;/code&gt;: perform the operation [number] of times. If [number] is not specified, then perform 1 time. Example: &lt;code&gt;dd&lt;/code&gt; deletes a line, &lt;code&gt;d2d&lt;/code&gt; or &lt;code&gt;2dd&lt;/code&gt; deletes 2 lines; &lt;code&gt;j&lt;/code&gt; moves the cursor down 1 line, &lt;code&gt;10j&lt;/code&gt; moves the cursor down 10 lines&lt;/p&gt;

&lt;p&gt;Move around:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;h&lt;/code&gt; to move left&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;j&lt;/code&gt; to move down&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;k&lt;/code&gt; to move up&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;l&lt;/code&gt; to move right&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0&lt;/code&gt; to move to the begin of line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;^&lt;/code&gt; to move to the first non-space character of line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$&lt;/code&gt; to move to the end of line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gg&lt;/code&gt; to move to the first line of file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;G&lt;/code&gt; to move to the last line of file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;w&lt;/code&gt; to move to the beginning of next word&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;e&lt;/code&gt; to move to the end of next word&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[number]G&lt;/code&gt; to move to the specified line number&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%&lt;/code&gt; to move/alternate between beginning and ending ‘( )’, ‘[ ]’ and ‘{ }’ characters, if the cursor is currently in/on those characters&lt;/li&gt;
  &lt;li&gt;Ctrl-O to move the cursor back to where you were, repeat to go further&lt;/li&gt;
  &lt;li&gt;Ctrl-I to is the reverse of Ctrl-0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;File operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; to quit without change&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; to write/save and quit&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:w [filename]&lt;/code&gt; to write the text to that file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vim [filename]&lt;/code&gt; to open a file with vim&lt;/li&gt;
  &lt;li&gt;Ctrl-G to show location of the file and file status&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/[term]&lt;/code&gt; to search the term from the begin of file, use &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; to search forward, backward respectively&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;?[term]&lt;/code&gt; to search the term from the end of file, use &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; to search forward, backward respectively
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;:set ic&lt;/code&gt; to ignore case-sensitivity and &lt;code&gt;:set noic&lt;/code&gt; to turn it off&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:set hls&lt;/code&gt; to set highlight search and &lt;code&gt;:set nohls&lt;/code&gt; to turn it off, &lt;code&gt;:nohlsearch&lt;/code&gt; to temporarily turn the color off&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;:set is&lt;/code&gt; to set incremental search and &lt;code&gt;:set nois&lt;/code&gt; to turn it off&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:![command]&lt;/code&gt; to execute any terminal command. Example &lt;code&gt;:!cd ..&lt;/code&gt;, &lt;code&gt;:!pwd&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;:!ls`,…&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;v&lt;/code&gt; to start visual mode&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;y&lt;/code&gt; to yank (copy), (to paste it, move the cursor to desired location and &lt;code&gt;p&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;y&lt;/code&gt; is an operator, and can work with motion like (“Move around” section above)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Delete operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;x&lt;/code&gt; to delete the character at cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dw&lt;/code&gt; to delete a word, and the spaces leading to the next word (the cursor must be at the first character of the word to delete)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;de&lt;/code&gt; to delete a word only (the cursor must be at the first character of the word to delete)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;d$&lt;/code&gt; to delete from the cursor to the end of line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dd&lt;/code&gt; to delete line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add texts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;i&lt;/code&gt; to insert before the cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a&lt;/code&gt; to insert after the cursor (basically to append to a line)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;A&lt;/code&gt; to append at the end of the line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;p&lt;/code&gt; to put the previously deleted texts&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:r [filename]&lt;/code&gt; to insert the content of the file below the current cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:r ![command]&lt;/code&gt; to insert output of the command below the current cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;o&lt;/code&gt; to make and move to a new line under the cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;O&lt;/code&gt; to make and move to a new line above the cursor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edit texts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;u&lt;/code&gt; to undo the last change&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;U&lt;/code&gt; to undo the last changes in the whole line&lt;/li&gt;
  &lt;li&gt;Ctrl-R to undo the undo&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;r[character]&lt;/code&gt; to replace the character at the cursor&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;R&lt;/code&gt; to replace multiple characters&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ce&lt;/code&gt; to change until the end of the word (kind of a shorthand for &lt;code&gt;de&lt;/code&gt; then &lt;code&gt;i&lt;/code&gt;, without having to have the cursor at the beginning of the word)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;c$&lt;/code&gt; to change until the end of line (kind of a shorthand for &lt;code&gt;d$&lt;/code&gt; then &lt;code&gt;i&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:s/[old]/[new]&lt;/code&gt; to substitute the first occurence of old word with new word &lt;em&gt;in the current line&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:s/[old]/[new]/g&lt;/code&gt; to substitute all old words with new word &lt;em&gt;in the current line&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:[number_small],[number_large]s/[old]/[new]/g&lt;/code&gt; to substitute all old words with new word between line [number_small] and line [number_large]&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:%s/old/new/g&lt;/code&gt; to substitute all old words with new word &lt;em&gt;in the file&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:%s/old/new/gc&lt;/code&gt; to substitue all old words with new word &lt;em&gt;in the file&lt;/em&gt; but with notifying prompt for each change occurence
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;y&lt;/code&gt; to replace&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;n&lt;/code&gt; to skip&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;a&lt;/code&gt; to replace and end all substitution there&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;q&lt;/code&gt; to abort&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;l&lt;/code&gt;: like &lt;code&gt;a&lt;/code&gt; but will also move the cursor to begin of line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Efficiency:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:ab [abbreviated] [term]&lt;/code&gt; to create an abbreviation of term&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 17 Jan 2017 23:45:06 +0000</pubDate>
        <link>http://yourdomain.com/vim/vim-cheatsheet.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/vim-cheatsheet.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>170115 - Notes on Apache</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;it is a piece of software that runs in the background (hence it’s best that the system supports multi-tasking)&lt;/li&gt;
  &lt;li&gt;its main purpose is to listen to request (from IP addresses specified inside its config files), analyzes that request, and returns a response&lt;/li&gt;
  &lt;li&gt;it can be extended by modules&lt;/li&gt;
  &lt;li&gt;it is set up to run through its configuration files&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;multiple domains can be on the same IP (virtual hosts), or vice versa (multiple servers or multi-addresses)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;in the first case, the process looks as follow: user types domain name -&amp;gt; browser sends the domain name to DNS service -&amp;gt; DNS service returns the IP address of that domain name -&amp;gt; browser connects to that IP address, with the domain name in HOST header to let server know which site should be served if the server hosts multiple sites&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;virtual-hosts&quot;&gt;Virtual hosts&lt;/h1&gt;
&lt;p&gt;(the text below is the most important partially copied from &lt;a href=&quot;https://httpd.apache.org/docs/2.4/vhosts/details.html&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is a main server which consists of all the definitions appearing outside of &lt;virtualhost&gt; sections.&lt;/virtualhost&gt;&lt;/li&gt;
  &lt;li&gt;There are virtual servers, called vhosts, which are defined by &lt;virtualhost&gt; sections.&lt;/virtualhost&gt;&lt;/li&gt;
  &lt;li&gt;Each VirtualHost directive includes one or more addresses and optional ports. Hostnames can be used in place of IP addresses in a virtual host definition, but they are resolved at startup and if any name resolutions fail, those virtual host definitions are ignored. This is, therefore, not recommended. The address can be specified as *, which will match a request if no other vhost has the explicit address on which the request was received. The address appearing in the VirtualHost directive can have an optional port. If the port is unspecified, it is treated as a wildcard port, which can also be indicated explicitly using *. The wildcard port matches any port. Collectively the entire set of addresses (including multiple results from DNS lookups) are called the vhost’s address set.&lt;/li&gt;
  &lt;li&gt;Apache automatically discriminates on the basis of the HTTP Host header supplied by the client whenever the most specific match for an IP address and port combination is listed in multiple virtual hosts.&lt;/li&gt;
  &lt;li&gt;The ServerName directive may appear anywhere within the definition of a server. However, each appearance overrides the previous appearance (within that server). If no ServerName is specified, the server attempts to deduce it from the server’s IP address. The first name-based vhost in the configuration file for a given IP:port pair is significant because it is used for all requests received on that address and port for which no other vhost for that IP:port pair has a matching ServerName or ServerAlias. It is also used for all SSL connections if the server does not support Server Name Indication.&lt;/li&gt;
  &lt;li&gt;If a vhost has no ServerAdmin, Timeout, KeepAliveTimeout, KeepAlive, MaxKeepAliveRequests, ReceiveBufferSize, or SendBufferSize directive then the respective value is inherited from the main server. (That is, inherited from whatever the final setting of that value is in the main server.)&lt;/li&gt;
  &lt;li&gt;The “lookup defaults” that define the default directory permissions for a vhost are merged with those of the main server. This includes any per-directory configuration information for any module.&lt;/li&gt;
  &lt;li&gt;The per-server configs for each module from the main server are merged into the vhost server.&lt;/li&gt;
  &lt;li&gt;Essentially, the main server is treated as “defaults” or a “base” on which to build each vhost. But the positioning of these main server definitions in the config file is largely irrelevant – the entire config of the main server has been parsed when this final merging occurs. So even if a main server definition appears after a vhost definition it might affect the vhost definition.&lt;/li&gt;
  &lt;li&gt;Any vhost that includes the magic &lt;em&gt;default&lt;/em&gt; wildcard is given the same ServerName as the main server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtual-host-matching&quot;&gt;Virtual host matching&lt;/h2&gt;

&lt;p&gt;The server determines which vhost to use for a request as follows:&lt;/p&gt;

&lt;h4 id=&quot;ip-address-lookup&quot;&gt;IP address lookup&lt;/h4&gt;

&lt;p&gt;When the connection is first received on some address and port, the server looks for all the VirtualHost definitions that have the same IP address and port.&lt;/p&gt;

&lt;p&gt;If there are no exact matches for the address and port, then wildcard (*) matches are considered.&lt;/p&gt;

&lt;p&gt;If no matches are found, the request is served by the main server.&lt;/p&gt;

&lt;p&gt;If there are VirtualHost definitions for the IP address, the next step is to decide if we have to deal with an IP-based or a name-based vhost.&lt;/p&gt;

&lt;h4 id=&quot;ip-based-vhost&quot;&gt;IP-based vhost&lt;/h4&gt;

&lt;p&gt;If there is exactly one VirtualHost directive listing the IP address and port combination that was determined to be the best match, no further actions are performed and the request is served from the matching vhost.&lt;/p&gt;

&lt;h4 id=&quot;name-based-vhost&quot;&gt;Name-based vhost&lt;/h4&gt;

&lt;p&gt;If there are multiple VirtualHost directives listing the IP address and port combination that was determined to be the best match, the “list” in the remaining steps refers to the list of vhosts that matched, in the order they were in the configuration file.&lt;/p&gt;

&lt;p&gt;If the connection is using SSL, the server supports Server Name Indication, and the SSL client handshake includes the TLS extension with the requested hostname, then that hostname is used below just like the Host: header would be used on a non-SSL connection. Otherwise, the first name-based vhost whose address matched is used for SSL connections. This is significant because the vhost determines which certificate the server will use for the connection.&lt;/p&gt;

&lt;p&gt;If the request contains a Host: header field, the list is searched for the first vhost with a matching ServerName or ServerAlias, and the request is served from that vhost. A Host: header field can contain a port number, but Apache always ignores it and matches against the real port to which the client sent the request.&lt;/p&gt;

&lt;p&gt;The first vhost in the config file with the specified IP address has the highest priority and catches any request to an unknown server name, or a request without a Host: header field (such as a HTTP/1.0 request).&lt;/p&gt;

&lt;h2 id=&quot;source&quot;&gt;Source:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[Apache documentation][apache_virtual_host]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/vhosts/&quot;&gt;apache_virtual_host&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 22:11:34 +0000</pubDate>
        <link>http://yourdomain.com/apache/note/notes-on-apache.html</link>
        <guid isPermaLink="true">http://yourdomain.com/apache/note/notes-on-apache.html</guid>
        
        
        <category>apache</category>
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>170115 - Notes on Apache Configuration</title>
        <description>&lt;p&gt;Core configuration: https://httpd.apache.org/docs/2.4/mod/core.html
Access configuration: https://httpd.apache.org/docs/2.4/mod/mod_access_compat.html
Some Apache security tips: http://www.tecmint.com/apache-security-tips/&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 21:10:28 +0000</pubDate>
        <link>http://yourdomain.com/apache/notes-on-apache-configuration.html</link>
        <guid isPermaLink="true">http://yourdomain.com/apache/notes-on-apache-configuration.html</guid>
        
        
        <category>apache</category>
        
      </item>
    
      <item>
        <title>170115 - Notes on deploying Django</title>
        <description>&lt;h1 id=&quot;deploy-with-ubuntu-on-apache&quot;&gt;Deploy with Ubuntu on Apache&lt;/h1&gt;

&lt;p&gt;The note below works as of January 2017 and uses Ubuntu 14.04.4 LTS, Apache 2.4, Python 3.4.3, Django 1.10.3, and mod_wsgi 4.5.13. Other versions of any of these softwares might work or not work.&lt;/p&gt;

&lt;h2 id=&quot;step-by-step&quot;&gt;Step-by-step&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;[Create][create_user] a non-root user account with sudo privilege, and SSH to that non-root account
    &lt;ul&gt;
      &lt;li&gt;[User privilege][linux_user_privilege]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install these packages on Ubuntu:
    &lt;ul&gt;
      &lt;li&gt;python3-pip&lt;/li&gt;
      &lt;li&gt;libapache2-mod-wsgi-py3 (this is a binary mod_wsgi compiled with Python 3.4.0, so if you use other versions of Python, e.g. 3.4.!0, 3.!4, mod_wsgi might not work, and it would be better to compile from source - see below)&lt;/li&gt;
      &lt;li&gt;libxml2, libxml2-dev, libxlst1.1, libxslt1-dev, libjpeg-turbo8, libjpeg-turbo8-dev, libpng-dev, libfreetype6-dev (these are packages that my Django app requires, you might not need, so you can skip it)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install virtualenv on Ubuntu: &lt;code&gt;sudo pip3 install virtualenv&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new environment: &lt;code&gt;virtualenv -p python3.4 [env_name]&lt;/code&gt; and activate it (&lt;code&gt;source activate [env_name]/bin/activate&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install django (1.10.3): &lt;code&gt;pip3 install django=1.10.3&lt;/code&gt;, start a test project, migrate, create super user, collect static, and run it with &lt;code&gt;./manage.py runserver 0.0.0.0:8000&lt;/code&gt;. The test site should show up when connected using the browser to [IP address]:8000.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure Apache and mod_wsgi:
    &lt;ul&gt;
      &lt;li&gt;Create a text file inside &lt;code&gt;/etc/apache2/sites-available/&lt;/code&gt;. In this example, let’s call it &lt;code&gt;abc.conf&lt;/code&gt;, and add the following:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so
WSGISocketPrefix /var/run/wsgi

&lt;span class=&quot;nt&quot;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:80&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    Alias /static /path/to/static/folder
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/path/to/static/folder&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            Order allow,deny
            Allow from all
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/path/to/your/django/app/folder&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            Require all granted
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/path/to/folder/that/contains/wsgi.py&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Files&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;wsgi.py&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    Require all granted
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Files&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

    WSGIDaemonProcess [any_name] python-path=/path/to/your/django/app/folder:/path/to/your/python/site-packages python-home=/path/to/your/virtual/env
    WSGIProcessGroup [any_name]
    WSGIScriptAlias / /path/to/your/wsgi.py
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Explanation of the above configuration:
    &lt;ul&gt;
      &lt;li&gt;LoadModule: load mod_wsgi module, so that WSGI directives will be recognized by Apache&lt;/li&gt;
      &lt;li&gt;WSGISocketPrefix: see errors section below&lt;/li&gt;
      &lt;li&gt;ErrorLog, CustomLog: directory where the log files will be stored&lt;/li&gt;
      &lt;li&gt;Alias /static /path/to/static/folder and &amp;lt;Directory …static/folder&amp;gt;…&amp;lt;/Directory&amp;gt;: serve static files, and enable read-write permissions on folder contain static files&lt;/li&gt;
      &lt;li&gt;&amp;lt;Directory …/app/folder/&amp;gt;…&amp;lt;/Directory&amp;gt;: allow access the folder that contains all execution files&lt;/li&gt;
      &lt;li&gt;&amp;lt;Directory …/wsig.py/&amp;gt;…&amp;lt;/Directory&amp;gt;: allow access to the wsgi.py file&lt;/li&gt;
      &lt;li&gt;WSGIDaemonProcess: basically, the site will be served by a daemon process (anytime Apache receives request that directed to this virtual host, it will pass the request to a wsgi process, this process will execute and return back the result). It will need several arguments, but shown above are
        &lt;ul&gt;
          &lt;li&gt;the name of daemon process&lt;/li&gt;
          &lt;li&gt;path to your python code, the site-packages that contains all packages that your Python will need (followed by colon)&lt;/li&gt;
          &lt;li&gt;the path to your virtual environment (so that WSGI can run the code with the correct Python version)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;WSGIProcessGroup: same name as the daemonprocess above&lt;/li&gt;
      &lt;li&gt;WSGIScriptAlias: anything from / (the root domain) will be handled by wsgi.py&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Symlink &lt;code&gt;abc.conf&lt;/code&gt; to sites-enabled (&lt;code&gt;sudo a2ensite [conf_name]&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Handle permission issues
    &lt;ul&gt;
      &lt;li&gt;Give Apache access and group ownership to sqlite database&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;chmod 664 /path/to/db.sqlite3/file&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;sudo chown :www-data /path/to/db.sqlite3/file&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Give Apache group ownership to the Django app files: &lt;code&gt;sudo chown :www-data /path/to/project&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart Apache: &lt;code&gt;sudo service apache2 restart&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;

&lt;p&gt;During installing and configuring mod_wsgi, several errors arise:&lt;/p&gt;

&lt;h4 id=&quot;mismatch-in-compiled-python-and-runtime-python&quot;&gt;Mismatch in compiled Python and runtime Python&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mod_wsgi: Compiled &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; Python/3.4.0.
mod_wsgi: Runtime using Python/3.4.3.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Exception ignored in: &amp;lt;module &lt;span class=&quot;s1&quot;&gt;&amp;#39;threading&amp;#39;&lt;/span&gt; from &lt;span class=&quot;s1&quot;&gt;&amp;#39;/usr/lib/python3.4/threading.py&amp;#39;&lt;/span&gt;&amp;gt;
Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    File &lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/lib/python3.4/threading.py&amp;quot;&lt;/span&gt;, line 1288, in _shutdown
        assert tlock is not None
AssertionError:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my case, I use libapache2-mod-wsgi-py3, which is compiled for Python 3.4.0. However, in my environment, I use Python 3.4.3. So I uninstalled libapache2-mod-wsgi-py3 and compile mod_wsgi from source against the correct Python version (more information on compile from source below)&lt;/p&gt;

&lt;h4 id=&quot;permissions-issue&quot;&gt;Permissions issue&lt;/h4&gt;

&lt;p&gt;(13)Permission denied: [client ::1:36568] mod_wsgi (pid=14185): Unable to connect to WSGI daemon process ‘[name_here]’ on ‘/var/run/apache2/wsgi.[…].sock’ after multiple attempts&lt;/p&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;p&gt;&lt;code&gt;(13)Permission denied: [client ::1:37840] mod_wsgi (pid=20690): Unable to connect to WSGI daemon process &#39;cpp_test&#39; on &#39;/var/run/apache2/wsgi.[...].sock&#39; as user with uid=[...].&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(2)No such file or directory: mod_wsgi (pid=22808): Couldn&#39;t bind unix domain socket &#39;/etc/apache2/run/wsgi.[...].sock&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Refer &lt;a href=&quot;http://modwsgi.readthedocs.io/en/develop/user-guides/configuration-issues.html&quot;&gt;here&lt;/a&gt;. But the main point is Apache process communicates with WSGI daemon process through UNIX sockets (basically files on disk). If the folder contains those files don’t have read/write permission, communication halts. E.g. in the example above Apache cannot read/write on /var/run/apache2. As a result, we need to assign a different location, by:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WSGISocketPrefix run/wsgi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some Linux distributions (including Ubuntu) prohibit read/write on run, so use this instead:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WSGISocketPrefix /var/run/wsgi&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;cannot-load-modwsgiso&quot;&gt;Cannot load mod_wsgi.so&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Cannot load modules/mod_wsgi.so into server: /etc/apache2/modules/mod_wsgi.so: cannot open shared object file: No such file or directory&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This error probably comes from wsgi.conf and wsgi.load not symlinked in mods-enabled. To solve it:
- &lt;code&gt;sudo a2enmod wsgi&lt;/code&gt;
or 
- &lt;code&gt;LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so&lt;/code&gt; (in configuration file above)&lt;/p&gt;

&lt;h2 id=&quot;compile-from-sources&quot;&gt;Compile from sources&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget -q &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/GrahamDumpleton/mod_wsgi/archive/4.5.13.tar.gz&amp;quot;&lt;/span&gt;
tar -xzf &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.5.13.tar.gz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./mod_wsgi-4.5.13
./configure --with-python&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/the/right/python/executable
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Depending on the Apache version that apache2-dev library should be installed - &lt;code&gt;sudo apt-get install apache2-dev&lt;/code&gt;. Otherwise, during ./configure, something like this might appear &lt;code&gt;apxs: command not found&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then mod_wsgi should be found in these directories:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/etc
/etc/apache2
/etc/apache2/mods-available
/etc/apache2/mods-available/wsgi.conf
/etc/apache2/mods-available/wsgi.load
/usr
/usr/lib
/usr/lib/apache2
/usr/lib/apache2/modules
/usr/lib/apache2/modules/mod_wsgi.so-3.4
/usr/lib/apache2/modules/mod_wsgi.so&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This note contains information from the following sources:
- [mod_wsgi official documentation][mod_wsgi_doc]
- [How to serve Django applications with Apache and mod_wsgi on Ubuntu 14.04][digital_ocean_tut]
- [Django resources][django_resource]&lt;/p&gt;

&lt;p&gt;Other sources:
- This can be an easier way to install [mod_wsgi][mod_wsgi_pip] (haven’t tried yet)
- [Set up uwsgi and nginx to serve Python apps on Ubuntu][uwsgi_nginx]
- [How to configure Apache Web Server on an Ubuntu or Debian VPS][apache_ubuntu]&lt;/p&gt;

&lt;p&gt;http://stackoverflow.com/questions/2285879/how-do-i-redirect-domain-com-to-www-domain-com-under-django&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04#step-one-—-root-login&quot;&gt;create_user&lt;/a&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-14-04&quot;&gt;digital_ocean_tut&lt;/a&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-edit-the-sudoers-file-on-ubuntu-and-centos&quot;&gt;linux_user_privilege&lt;/a&gt;
&lt;a href=&quot;http://modwsgi.readthedocs.io/en/develop/user-guides/installation-issues.html&quot;&gt;mod_wsgi_doc&lt;/a&gt;
&lt;a href=&quot;https://pypi.python.org/pypi/mod_wsgi&quot;&gt;mod_wsgi_pip&lt;/a&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04&quot;&gt;uwsgi_nginx&lt;/a&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-configure-the-apache-web-server-on-an-ubuntu-or-debian-vps&quot;&gt;apache_ubuntu&lt;/a&gt;
&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/modwsgi/&quot;&gt;django_resource&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 01:17:06 +0000</pubDate>
        <link>http://yourdomain.com/django/notes-on-deploying-django.html</link>
        <guid isPermaLink="true">http://yourdomain.com/django/notes-on-deploying-django.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>170113 - Notes on Django Models</title>
        <description>&lt;p&gt;In case that you want to modify &lt;code&gt;ManyToManyField&lt;/code&gt;, the best bet is to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a backup of the the field’s through table&lt;/li&gt;
  &lt;li&gt;Delete the ManyToManyField, and migrate this change to the database. This will drop the &lt;code&gt;ManyToManyField&lt;/code&gt; from the database, and will also drop the through table inside the database (if you use default through table)&lt;/li&gt;
  &lt;li&gt;Add back ManyToManyField inside your model, with your desired options, and migrate it back to the database.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 13 Jan 2017 16:45:27 +0000</pubDate>
        <link>http://yourdomain.com/django/notes-on-django-models.html</link>
        <guid isPermaLink="true">http://yourdomain.com/django/notes-on-django-models.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>170112 - Notes on Django Templates</title>
        <description>&lt;h1 id=&quot;executing-custom-template-tags-and-filters-inside-textfield&quot;&gt;Executing custom template tags and filters inside TextField&lt;/h1&gt;

&lt;h2 id=&quot;toy-problem&quot;&gt;Toy problem:&lt;/h2&gt;

&lt;p&gt;I create a blog with Django, and I use a Django model’s TextField to store the content of each blog post in the database. In the blog posts, I might want to include some images, but since manually writing &lt;code&gt;&amp;lt;img src=&quot;...&quot; style=&quot;...&quot; class=&quot;...&quot; /&amp;gt;&lt;/code&gt; for each image is too clunkie and error-prone (especially for non-technical people - my mom), I would want a simpler way to insert images. One way to do that is to create a custom Django’s template tag, that automatically render image url to &lt;code&gt;&amp;lt;img.../&amp;gt;&lt;/code&gt;, e.g &lt;code&gt;{% make_image http://domain.com/img1.jpg left %}&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;img src=&quot;http://domain.com/img1.jpg&quot; class=&quot;left&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-reasons-on-why-it-is-possible&quot;&gt;Key reasons on why it is possible:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Any string object can be considered as a template -&amp;gt; so the model’s TextFields can also be rendered as a template&lt;/li&gt;
  &lt;li&gt;Django provides the ability to create custom tags and filters -&amp;gt; so we can create the &lt;code&gt;make_image&lt;/code&gt; tag of our own to perform the conversion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;each-components&quot;&gt;Each components&lt;/h2&gt;

&lt;h3 id=&quot;custom-template-tags&quot;&gt;Custom template tags&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Create a directory to store your tags. By default, this directory should be named &lt;code&gt;templatetags&lt;/code&gt;, and located inside one of the registered apps in &lt;code&gt;settings.INSTALLED_APPS&lt;/code&gt;. Also create an &lt;code&gt;__init__.py&lt;/code&gt; inside that &lt;code&gt;templatetags&lt;/code&gt;, so that Python can import anything inside &lt;code&gt;templatetags&lt;/code&gt; as a module.&lt;/li&gt;
  &lt;li&gt;Create a Python file (in this example I would name it &lt;code&gt;extra_html.py&lt;/code&gt;). The name of that Python file will be the name of the template modules (to load this module, just use &lt;code&gt;{% load extra_html %}&lt;/code&gt; inside your template file). It’s important to name that file distinctly to avoid clash with other installed template tags/filters module of the same name. For example, if you have 2 apps, each with the following structure (respectively): &lt;code&gt;app1/templatetags/abc.py&lt;/code&gt; and &lt;code&gt;app2/templatetags/abc.py&lt;/code&gt;, then when you call &lt;code&gt;{% load abc %}&lt;/code&gt;, Django will get confused on which &lt;code&gt;abc&lt;/code&gt; module you want to load. Also keep in mind to avoid naming conflicts with template modules of 3rd party app you use in your project.&lt;/li&gt;
  &lt;li&gt;Create &lt;code&gt;make_image&lt;/code&gt; tag. As of version 1.10, the Django template system runs in 2 steps:
 a. compiling: parse the template to find any instance of &lt;code&gt;{% ... %}&lt;/code&gt; and &lt;code&gt;{{ ... }}&lt;/code&gt;, and
 b. rendering: compute and render the result of those &lt;code&gt;{% ... %}&lt;/code&gt;, &lt;code&gt;{{ ... }}&lt;/code&gt; instances.&lt;/li&gt;
  &lt;li&gt;Compile code:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils.html&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_html&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@register.tag&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemplateSyntaxError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;quot;{} tag requires 2 arguments: url and &amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MakeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;register&lt;/code&gt; helps Django template system to find custom template tags and filters (it is used right below with decorator &lt;code&gt;@register.tag&lt;/code&gt; to register &lt;code&gt;make_image&lt;/code&gt; -&amp;gt; so that you can use and Django can recognize &lt;code&gt;{% make_image ... %}&lt;/code&gt; in your Django templates)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;make_image&lt;/code&gt; takes 2 arguments: the first one is the parser that parses your template, and the second one is a string right after &lt;code&gt;{%  &lt;/code&gt; and before ` %}`.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.split_contents()&lt;/code&gt; will split the string from spaces, e.g &lt;code&gt;&quot;make_image http://domain.com/image1 middle&quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;[&quot;make_image&quot;, &quot;http://domain.com/image1&quot;, &quot;middle&quot;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;MakeImage&lt;/code&gt; is a rendering class (will be shown later), that takes the url and the location to render into appropriate html tag
    &lt;ol&gt;
      &lt;li&gt;Render code:&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            Initialize information needed to create image&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            Given a template node initialized with the above information, return&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            a representation.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;img src=&amp;quot;{}&amp;quot; class=&amp;quot;image_{}&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;template.Node&lt;/code&gt;: all compiled/found Django template tags (&lt;code&gt;{% ... %}&lt;/code&gt;) will be rendered as an instance of &lt;code&gt;template.Node&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;render(self, context)&lt;/code&gt;: this function will be called by the Django template system to render tags.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Put the tag inside your TextField: suppose you want to include image in your blog post, instead of writing the full HTML img tag, you can just write &lt;code&gt;{% make_image http://example.com/image1 center %}&lt;/code&gt; in your TextField and you will get &lt;code&gt;&amp;lt;img src=&quot;http://example.com/image1&quot; class=&quot;image_center&quot; /&amp;gt;&lt;/code&gt; when your TextField is rendered. But… it does not work yet, as you have to make Django render your TextField as if it is a template (so that it can compile and render &lt;code&gt;{% make_image ... %}&lt;/code&gt;, otherwise this code will show up in your blog and no image appears)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;stringtext-object-as-a-template&quot;&gt;String/text object as a template&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Objective: we will create another custom tag to evaluate the TextField as template. We will call this custom tag &lt;code&gt;render&lt;/code&gt;. So: &lt;code&gt;\{\% render object.textfield \%\}&lt;/code&gt; will render &lt;code&gt;object.textfield&lt;/code&gt; as a template, hence can compile and render &lt;code&gt;make_image&lt;/code&gt; tag inside it.&lt;/li&gt;
  &lt;li&gt;In the same Python file above, add:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RenderTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;quot;{}{}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;% lo&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ad extra_html %}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VariableDoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemplateSyntaxError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Cannot load&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@register.tag&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemplateSyntaxError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;quot;{} tag requires a single argument, which is a block of &amp;quot;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RenderTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;structurally, it looks the same as &lt;code&gt;make_image&lt;/code&gt; tag: we will have &lt;code&gt;render&lt;/code&gt; as a custom template tag, that Django can compile whenever it finds &lt;code&gt;\{\% render ... \%\}&lt;/code&gt;, and Django will render the tag with &lt;code&gt;RenderTextField.render(context)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;split_contents&lt;/code&gt;: after split_contents, we will get [“render”, “object.textfield”]&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;template.Variable&lt;/code&gt;: since we want to treat object.textfield as a variable, and not a simple text “object.textfield”, we will need to wrap it inside &lt;code&gt;template.Variable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;content = self.variable.resolve(context)&lt;/code&gt;: Django takes the context to get the value of &lt;code&gt;object.textfield&lt;/code&gt;. Here, &lt;code&gt;content&lt;/code&gt; will be a string that is a value of &lt;code&gt;object.textfield&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;t = template.Template(&quot;{}{}&quot;.format(&quot;{% load extra_html %}&quot;, content))&lt;/code&gt;: the string “{% load extra_html %}…..” will be rendered as a template. We will need the “{% load extra_html %}” appear before the string our object.textfield value, so that the &lt;code&gt;make_image&lt;/code&gt; tag inside it can be recognized by the Django template system&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Put everything inside your template, example:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% load extra_html %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;object.title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{% render object.textfield %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;performance-and-security-concern&quot;&gt;Performance and security concern&lt;/h2&gt;

&lt;p&gt;This is a simple example of using custom tags and filters. However, keep in mind that:
    - you would want to autoescape the string object (e.g. TextField, CharField,…), especially when they come from users
    - don’t be too reliant on template tags/filters. It slows down site performance. Beside, it’s good to keep the logic outside of templates&lt;/p&gt;

&lt;h2 id=&quot;source&quot;&gt;Source:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/howto/custom-template-tags/&quot;&gt;Custom template tags/filters documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/ref/templates/builtins/&quot;&gt;Built-in template tags/filters documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 18:31:48 +0000</pubDate>
        <link>http://yourdomain.com/django/notes-on-django-templates.html</link>
        <guid isPermaLink="true">http://yourdomain.com/django/notes-on-django-templates.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>170106 - Blog</title>
        <description>&lt;p&gt;Today I upgraded cpp a little bit. Certain things that I learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In Django, when defining Model, you’d better leave .Meta.db_table (table name) as it is by default. If you set table name yourself, the name you pick would have some chances to collide with Django’s default table name for other model (e.g. through table for ManyToMany relationship), which would make tracing the bugs a little bit time consuming. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt; can discover static files if &lt;code&gt;debug&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, which in itself poses a security risk, not to mention that it is inefficient. To use &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; without setting &lt;code&gt;debug&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;, manually modify Apache and wsgi to serve static files at &lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Include &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; to run &lt;code&gt;python manage.py collectstatic&lt;/code&gt; to collect all static files inside all applications (both your apps and 3rd-party apps) into &lt;code&gt;STATIC_ROOT&lt;/code&gt; directory. If you serve static files on the same server that runs Django, then you would probably wants to use &lt;code&gt;collectstatic&lt;/code&gt; on the server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You would also want to create a folder to contain project-level files and information. Don’t just store those project-level files directly inside project folder, that would become messy really fast.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s best if your project’s development structure resembles production structure. 2 main benefits: (1) when your development environment does not work, you know the production environment also does not work, and if you can fix the problem in your own development environment, then it’s highly likely that the same problem in production environment would also be fixed, (2) make development environment resemble production environment will force you to keep your development environment organized.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 06 Jan 2017 01:44:58 +0000</pubDate>
        <link>http://yourdomain.com/blog/blog.html</link>
        <guid isPermaLink="true">http://yourdomain.com/blog/blog.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>161228 - blog</title>
        <description>&lt;p&gt;Incorporate TinyMCE to cpp using django-tinymce.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install: &lt;code&gt;pip install django-tinymce&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure:&lt;/p&gt;

    &lt;p&gt;a. Add ‘tinymce’ to INSTALLED_APPS
 b. Make sure that &lt;code&gt;TINYMCE_JS_URL&lt;/code&gt; and &lt;code&gt;TINYMCE_JS_ROOT&lt;/code&gt; point to source files
 c. Configure default editor with &lt;code&gt;TINYMCE_DEFAULT_CONFIG&lt;/code&gt;. Also see &lt;a href=&quot;http://www.tinymce.com/wiki.php/configuration&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://django-tinymce.readthedocs.io/en/latest/&quot;&gt;here&lt;/a&gt;. The following is the configuration I use for cpp (document here for future reference)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;TINYMCE_DEFAULT_CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;textareas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;theme&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;advanced&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;theme_advanced_toolbar_location&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;theme_advanced_toolbar_align&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;350px&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;700px&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;table,save,advhr,advimage,advlink,iespell,&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;quot;insertdatetime,preview,fullscreen,paste,print&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;theme_advanced_buttons1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;undo,redo,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;bold,italic,underline,strikethrough,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;justifyleft,justifycenter,justifyright,justifyfull,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;bullist,numlist,outdent,indent,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;fontselect,fontsizeselect,formatselect,separator,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;theme_advanced_buttons2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;cut,copy,pastetext,pasteword,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;charmap,blockquote,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;table,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;forecolor,backcolor,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;sub,sup,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;link,unlink,anchor,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;image,cleanup,help,separator,&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;fullscreen,preview,code,print,separator,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;theme_advanced_buttons3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;tablecontrols&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;auto_cleanup_word&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;plugin_insertdate_dateFormat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%m/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/%Y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;plugin_insertdate_timeFormat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;extended_valid_elements&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;a[name|href|target=_blank|title|onclick],&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;img[class|src|border=0|alt|title|hspace|vspace|width|height&amp;quot;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;quot;|align|onmouseover|onmouseout|name],&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;hr[class|width|size|noshade],&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;font[face|size|color|style],&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;span[class|align|style]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Create editor simply just by changing &lt;code&gt;fields.TextField&lt;/code&gt; to &lt;code&gt;tinymce.models.HTMLField&lt;/code&gt;. This editor should conform to the default configuration specified above.&lt;/li&gt;
  &lt;li&gt;Edit the appearence of text editor. Refer &lt;a href=&quot;https://www.tinymce.com/docs-3x/reference/buttons/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://archive.tinymce.com/wiki.php/Configuration3x:theme_advanced_buttons_1_n_add_before&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 28 Dec 2016 22:30:15 +0000</pubDate>
        <link>http://yourdomain.com/blog/blog.html</link>
        <guid isPermaLink="true">http://yourdomain.com/blog/blog.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>161226 - Google Drive REST API</title>
        <description>&lt;h1 id=&quot;drive-rest-api-capabilities&quot;&gt;Drive REST API capabilities&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Download, upload files&lt;/li&gt;
  &lt;li&gt;Create and open files from Google Drive web UI&lt;/li&gt;
  &lt;li&gt;Searches for files&lt;/li&gt;
  &lt;li&gt;Share and collaborate&lt;/li&gt;
  &lt;li&gt;Use shortcuts&lt;/li&gt;
  &lt;li&gt;Export and convert Google Docs&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;google-api-authentication-and-authorization&quot;&gt;Google API Authentication and Authorization&lt;/h1&gt;
&lt;p&gt;(focus mainly in installed apps)&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;App developers gets OAuth2.0 credentials for their client app from Google Api Console —-&amp;gt; App developers embed the credientials inside the source code of their client app —&amp;gt; During usage, client app uses that credentials to request access token from Google server —-&amp;gt; (if authorized) Google server sends back access token to client app —-&amp;gt; Client app uses that access token for the Google API that it is registered.&lt;/p&gt;

&lt;h2 id=&quot;little-more-detail&quot;&gt;Little more detail&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Obtain OAuth 2.0 credentials from Google API console. This step is to establish a connection between your app and Google, through the mutually known client ID and client secret&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obtain access token from Google Authorization Server. APIs typically are not there for everyone to freely access. The application must request and get an access token to use the APIs. Some types of requests require users to log in and explicitly allow permissions that your app request. This is called user consent.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send access token to use API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Refresh the access token if necessary, using refresh token.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;token-expirations&quot;&gt;Token expirations&lt;/h2&gt;

&lt;p&gt;When:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users revoke access from the app&lt;/li&gt;
  &lt;li&gt;Token has not been used for 6 months&lt;/li&gt;
  &lt;li&gt;User changed password and the token contain Gmail scopes&lt;/li&gt;
  &lt;li&gt;User account exceeds a certain number of tokens requests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;note&quot;&gt;Note:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The client ID and secret ID should be embedded inside client app’s source code, which ironically makes it not a secret… &lt;/li&gt;
  &lt;li&gt;(From some testing with Google Drive Python API)&lt;/li&gt;
  &lt;li&gt;the access token json file must contains all original keys (regardless of values)&lt;/li&gt;
  &lt;li&gt;as long as access_token is still valid (has not expired), the value of refresh_token, client_id and client_secret are unnecessary&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/api-client-library/python/guide/aaa_oauth&quot;&gt;Python API Client Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 26 Dec 2016 02:53:04 +0000</pubDate>
        <link>http://yourdomain.com/googleappengine/google-drive-rest-api.html</link>
        <guid isPermaLink="true">http://yourdomain.com/googleappengine/google-drive-rest-api.html</guid>
        
        
        <category>googleappengine</category>
        
      </item>
    
      <item>
        <title>161223 - DJANGO REST Framework</title>
        <description>&lt;hr /&gt;
&lt;p&gt;Main idea: the REST framework provides helpers for server to provide API service.&lt;/p&gt;

&lt;p&gt;Model (Django’s built-in models): this is the place where you store data&lt;/p&gt;

&lt;p&gt;Serializer (REST framework): serialize the data from Model into json. Make sense since usually in API server communicates with clients not in HTML but in json&lt;/p&gt;

&lt;p&gt;Viewsets (REST framework, like Django’s built-in view): this is REST framework’s pre-defined views (so more than likely, you don’t have to write your own views using Django’s class-based views to handle delivering the result back to client)&lt;/p&gt;

&lt;p&gt;Routers (REST framework, like Django’s urls): routers is a helper is included inside urlpatterns that disects the client’s requested url to call the correct views&lt;/p&gt;

&lt;p&gt;Settings: REST framwork’s specific settings.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## Serializer:&lt;/p&gt;

&lt;p&gt;Data object (such as model) (4)&amp;lt;—–&amp;gt;(1) Serializer (3)&amp;lt;—–&amp;gt;(2) JSON&lt;/p&gt;

&lt;p&gt;(1) Take an object, serialize that object into Python native datatype. Example: &lt;code&gt;serializer = Serializer(object)&lt;/code&gt; -&amp;gt; then ‘serializer’ is the native datatype.
(2) Native datatype can be written out into bytestrings to export to JSON with &lt;code&gt;rest_framework&lt;/code&gt;.renderers.JSONRenderer&lt;code&gt;. Example: &lt;/code&gt;json = JSONRenderer().render(serializer.data)&lt;code&gt;.
(3) Take a JSON, deserialize that JSON into Python native datatype. At the same time check if it&#39;s valid. This can be done with &lt;/code&gt;JSONParser().parse()&lt;code&gt;. Example: &lt;/code&gt;data = JSONParser().parse(json); serializer = Serializer(data=data)&lt;code&gt;.
(4) The native data can be used to create an instance of the original class with &lt;/code&gt;.save()&lt;code&gt;. Example: &lt;/code&gt;serialize.save()` will usually save the instance and return back the instance’s reference.&lt;/p&gt;

&lt;p&gt;This is handy in that it can serialize nested object&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question: how does serializer (especially ModelSerializer) populate data from ManyToManyFields?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Answer: there are 2 ways:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;use PrimaryKeyRelatedField: this field will list out the &lt;em&gt;primary keys&lt;/em&gt; of related objects&lt;/li&gt;
    &lt;li&gt;use Serializer for related objects, and add that Serializer as a Field: this will list out any &lt;em&gt;keys/combination of keys&lt;/em&gt; of related objects&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Serializer must either has a &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; attribute in &lt;code&gt;.Meta&lt;/code&gt; class. To include all fields, use &lt;code&gt;fields = &#39;__all__&#39;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## Views&lt;/p&gt;

&lt;p&gt;Since the content-type is automatically inferred from request, the API will return JSON in browser-friendly presentation if the request is made by browser.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create model&lt;/li&gt;
  &lt;li&gt;Create serializers&lt;/li&gt;
  &lt;li&gt;Create view
 3.1. return DRF’s Response object
 3.2. use class-based views (APIView)
 3.3. class-based views allow the use of mixins
 3.4. use DFR’s own generic class-based views
 3.5. combine related views into viewset
 3.6. binding viewset to urls with &lt;code&gt;Router&lt;/code&gt; class&lt;/li&gt;
  &lt;li&gt;Add url
 4.1. (optionally) add optional format suffixes to URLs&lt;/li&gt;
  &lt;li&gt;Add authentication and permissions to use API&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;Environment variables can be set/unset depending on Conda environments (for Unix):
- &lt;code&gt;${ENV_PATH}/etc/conda/activate.d/env_vars.sh&lt;/code&gt;
- &lt;code&gt;${ENV_PATH}/etc/conda/deactivate.d/env_vars.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;env_vars.sh&lt;/code&gt; of activate should look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;something else&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;env_vars.sh&lt;/code&gt; of deactivate should look like&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;KEY1
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;KEY2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Fri, 23 Dec 2016 10:32:59 +0000</pubDate>
        <link>http://yourdomain.com/django/django-rest-framework.html</link>
        <guid isPermaLink="true">http://yourdomain.com/django/django-rest-framework.html</guid>
        
        
        <category>django</category>
        
      </item>
    
  </channel>
</rss>
